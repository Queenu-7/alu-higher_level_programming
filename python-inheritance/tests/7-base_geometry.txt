#!/usr/bin/python3
BaseGeometry = import('7-base_geometry').BaseGeometry

bg = BaseGeometry()

Test case: dir(bg)
print(dir(bg))

Test case: bg.integer_validator("myint", 12)
bg.integer_validator("myint", 12)
print("myint validated successfully")

Test case: bg.integer_validator("width", 89)
bg.integer_validator("width", 89)
print("width validated successfully")

Test case: bg.integer_validator("age", 13.5) - Expected TypeError
try:
bg.integer_validator("age", 13.5)
except Exception as e:
print("[{}] {}".format(e.class.name, e))

Test case: bg.integer_validator("name", "John") - Expected TypeError
try:
bg.integer_validator("name", "John")
except Exception as e:
print("[{}] {}".format(e.class.name, e))

Test case: bg.integer_validator("age", 0) - Expected ValueError
try:
bg.integer_validator("age", 0)
except Exception as e:
print("[{}] {}".format(e.class.name, e))

Test case: bg.integer_validator("distance", -4) - Expected ValueError
try:
bg.integer_validator("distance", -4)
except Exception as e:
print("[{}] {}".format(e.class.name, e))

Test case: bg.area() - Expected Exception
try:
bg.area()
except Exception as e:
print("[{}] {}".format(e.class.name, e))

Additional integer_validator tests from rubric
try:
bg.integer_validator("age_tuple", (4,))
except Exception as e:
print("[{}] {}".format(e.class.name, e))

try:
bg.integer_validator("age_list", [3])
except Exception as e:
print("[{}] {}".format(e.class.name, e))

try:
bg.integer_validator("age_bool", True)
except Exception as e:
print("[{}] {}".format(e.class.name, e))

try:
bg.integer_validator("age_set", {3, 4})
except Exception as e:
print("[{}] {}".format(e.class.name, e))

try:
bg.integer_validator("age_none", None)
except Exception as e:
print("[{}] {}".format(e.class.name, e))
